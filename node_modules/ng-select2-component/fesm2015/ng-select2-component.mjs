import * as i4 from '@angular/cdk/overlay';
import { CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';
import * as i0 from '@angular/core';
import { EventEmitter, TemplateRef, Component, Optional, Self, Attribute, Input, Output, HostBinding, ViewChild, ViewChildren, Directive, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import * as i1 from '@angular/cdk/scrolling';
import * as i2 from '@angular/forms';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from 'ngx-infinite-scroll';
import { InfiniteScrollModule } from 'ngx-infinite-scroll';

const timeout = 200;
const unicodePatterns = [
    { l: 'a', s: /[ⓐａẚàáâầấẫẩãāăằắẵẳȧǡäǟảåǻǎȁȃạậặḁąⱥɐ]/gi },
    { l: 'aa', s: /ꜳ/gi },
    { l: 'ae', s: /[æǽǣ]/gi },
    { l: 'ao', s: /ꜵ/gi },
    { l: 'au', s: /ꜷ/gi },
    { l: 'av', s: /[ꜹꜻ]/gi },
    { l: 'ay', s: /ꜽ/gi },
    { l: 'b', s: /[ⓑｂḃḅḇƀƃɓ]/gi },
    { l: 'c', s: /[ⓒｃćĉċčçḉƈȼꜿↄ]/gi },
    { l: 'd', s: /[ⓓｄḋďḍḑḓḏđƌɖɗꝺ]/gi },
    { l: 'dz', s: /[ǳǆ]/gi },
    { l: 'e', s: /[ⓔｅèéêềếễểẽēḕḗĕėëẻěȅȇẹệȩḝęḙḛɇɛǝ]/gi },
    { l: 'f', s: /[ⓕｆḟƒꝼ]/gi },
    { l: 'g', s: /[ⓖｇǵĝḡğġǧģǥɠꞡᵹꝿ]/gi },
    { l: 'h', s: /[ⓗｈĥḣḧȟḥḩḫẖħⱨⱶɥ]/gi },
    { l: 'hv', s: /ƕ/gi },
    { l: 'i', s: /[ⓘｉìíîĩīĭİïḯỉǐȉȋịįḭɨı]/gi },
    { l: 'j', s: /[ⓙｊĵǰɉ]/gi },
    { l: 'k', s: /[ⓚｋḱǩḳķḵƙⱪꝁꝃꝅꞣ]/gi },
    { l: 'l', s: /[ⓛｌŀĺľḷḹļḽḻſłƚɫⱡꝉꞁꝇꝆ]/gi },
    { l: 'lj', s: /ǉ/gi },
    { l: 'm', s: /[ⓜｍḿṁṃɱɯ]/gi },
    { l: 'n', s: /[ⓝｎǹńñṅňṇņṋṉƞɲŉꞑꞥ]/gi },
    { l: 'nj', s: /ǌ/gi },
    { l: 'o', s: /[ⓞｏòóôồốỗổõṍȭṏōṑṓŏȯȱöȫỏőǒȍȏơờớỡởợọộǫǭøǿɔƟꝋꝍɵ]/gi },
    { l: 'oi', s: /ƣ/gi },
    { l: 'oe', s: /œ/gi },
    { l: 'oo', s: /ꝏ/gi },
    { l: 'ou', s: /ȣ/gi },
    { l: 'p', s: /[ⓟｐṕṗƥᵽꝑꝓꝕ]/gi },
    { l: 'q', s: /[ⓠｑɋꝗꝙ]/gi },
    { l: 'r', s: /[ⓡｒŕṙřȑȓṛṝŗṟɍɽꝛꞧꞃ]/gi },
    { l: 's', s: /[ⓢｓßẞśṥŝṡšṧṣṩșşȿꞩꞅẛ]/gi },
    { l: 't', s: /[ⓣｔṫẗťṭțţṱṯŧƭʈⱦꞇ]/gi },
    { l: 'tz', s: /ꜩ/gi },
    { l: 'u', s: /[ⓤｕùúûũṹūṻŭüǜǘǖǚủůűǔȕȗưừứữửựụṳųṷṵʉ]/gi },
    { l: 'v', s: /[ⓥｖṽṿʋꝟʌ]/gi },
    { l: 'vy', s: /ꝡ/gi },
    { l: 'w', s: /[ⓦｗẁẃŵẇẅẘẉⱳ]/gi },
    { l: 'x', s: /[ⓧｘẋẍ]/gi },
    { l: 'y', s: /[ⓨｙỳýŷỹȳẏÿỷẙỵƴɏỿ]/gi },
    { l: 'z', s: /[ⓩｚźẑżžẓẕƶȥɀⱬꝣ]/gi },
];
const defaultMinCountForSearch = 6;
const protectRegexp = new RegExp('[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]', 'g');

class Select2Utils {
    static getOptionByValue(data, value) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    for (const option of options) {
                        if (option.value === value) {
                            return option;
                        }
                    }
                }
                else if (groupOrOption.value === value) {
                    return groupOrOption;
                }
            }
        }
        return null;
    }
    static getOptionsByValue(data, value, multiple) {
        if (multiple) {
            const values = Array.isArray(value) ? value : [];
            const result = [];
            for (const v of values) {
                const option = Select2Utils.getOptionByValue(data, v);
                if (option) {
                    result.push(option);
                }
            }
            return result;
        }
        return Select2Utils.getOptionByValue(data, value);
    }
    static getFirstAvailableOption(data) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    for (const option of options) {
                        if (!option.disabled) {
                            return option.value;
                        }
                    }
                }
                else {
                    const option = groupOrOption;
                    if (!option.disabled) {
                        return option.value;
                    }
                }
            }
        }
        return null;
    }
    static valueIsNotInFilteredData(filteredData, value) {
        if (Select2Utils.isNullOrUndefined(value)) {
            return true;
        }
        for (const groupOrOption of filteredData) {
            const options = groupOrOption.options;
            if (options) {
                for (const option of options) {
                    if (option.value === value) {
                        return false;
                    }
                }
            }
            else if (groupOrOption.value === value) {
                return false;
            }
        }
        return true;
    }
    // eslint-disable-next-line
    static getPreviousOption(filteredData, hoveringValue) {
        let findIt = Select2Utils.isNullOrUndefined(hoveringValue);
        for (let i = filteredData.length - 1; i >= 0; i--) {
            const groupOrOption = filteredData[i];
            const options = groupOrOption.options;
            if (options) {
                for (let j = options.length - 1; j >= 0; j--) {
                    const option = options[j];
                    if (findIt && !option.disabled && !option.hide) {
                        return option;
                    }
                    if (!findIt) {
                        findIt = option.value === hoveringValue;
                    }
                }
            }
            else {
                const option = groupOrOption;
                if (findIt && !option.disabled && !option.hide) {
                    return option;
                }
                if (!findIt) {
                    findIt = option.value === hoveringValue;
                }
            }
        }
        return null;
    }
    // eslint-disable-next-line
    static getNextOption(filteredData, hoveringValue) {
        let findIt = Select2Utils.isNullOrUndefined(hoveringValue);
        for (const groupOrOption of filteredData) {
            const options = groupOrOption.options;
            if (options) {
                for (const option of options) {
                    if (findIt) {
                        if (!option.disabled && !option.hide) {
                            return option;
                        }
                    }
                    else if (!findIt) {
                        findIt = option.value === hoveringValue;
                    }
                }
            }
            else {
                const option = groupOrOption;
                if (findIt) {
                    if (!option.disabled && !option.hide) {
                        return option;
                    }
                }
                else if (!findIt) {
                    findIt = option.value === hoveringValue;
                }
            }
        }
        return null;
    }
    static getReduceData(data, maxResults = 0) {
        if (maxResults > 0) {
            let counter = 0;
            const result = [];
            // debugger;
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    const group = Object.assign(Object.assign({}, groupOrOption), { options: [] });
                    result.push(group);
                    for (const item of options) {
                        group.options.push(item);
                        counter++;
                        if (counter === maxResults) {
                            return { result, reduce: true };
                        }
                    }
                }
                else {
                    result.push(groupOrOption);
                    counter++;
                }
                if (counter === maxResults) {
                    return { result, reduce: true };
                }
            }
            return { result, reduce: false };
        }
        else {
            return { result: data, reduce: false };
        }
    }
    static getFilteredData(data, searchText, editPattern) {
        if (searchText) {
            const result = [];
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    if (options.some(group => Select2Utils.containSearchText(group.label, searchText, editPattern))) {
                        const filteredOptions = options.filter(group => Select2Utils.containSearchText(group.label, searchText, editPattern));
                        result.push(Object.assign(Object.assign({}, groupOrOption), { options: filteredOptions }));
                    }
                }
                else if (Select2Utils.containSearchText(groupOrOption.label, searchText, editPattern)) {
                    result.push(groupOrOption);
                }
            }
            return result;
        }
        else {
            return data;
        }
    }
    static getFilteredSelectedData(data, selectedOptions) {
        const result = [];
        for (const groupOrOption of data) {
            const options = groupOrOption.options;
            if (options) {
                const filteredOptions = options.filter(group => Select2Utils.isSelected(selectedOptions, group, true) === 'false');
                if (filteredOptions.length) {
                    result.push(Object.assign(Object.assign({}, groupOrOption), { options: filteredOptions }));
                }
            }
            else if (Select2Utils.isSelected(selectedOptions, groupOrOption, true) === 'false') {
                result.push(groupOrOption);
            }
        }
        return result;
    }
    static isSearchboxHiddex(data, minCountForSearch) {
        if (minCountForSearch === '' ||
            minCountForSearch === undefined ||
            minCountForSearch === null ||
            isNaN(+minCountForSearch)) {
            minCountForSearch = defaultMinCountForSearch;
        }
        const optionCount = Select2Utils.getOptionsCount(data);
        return optionCount < +minCountForSearch;
    }
    static isSelected(options, option, multiple) {
        return multiple
            ? options && options.some(op => op.value === option.value)
                ? 'true'
                : 'false'
            : options && option.value === options.value
                ? 'true'
                : 'false';
    }
    static removeSelection(options, option) {
        for (let i = 0; i < options.length; i++) {
            if (options[i].value === option.value) {
                options.splice(i, 1);
                return;
            }
        }
    }
    static getOptionsCount(data) {
        let count = 0;
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    count += options.length;
                }
                else {
                    count++;
                }
            }
        }
        return count;
    }
    static isNullOrUndefined(value) {
        return value === null || value === undefined;
    }
    static containSearchText(label, searchText, editPattern) {
        return searchText
            ? Select2Utils.formatSansUnicode(label).match(new RegExp(Select2Utils.formatPattern(searchText, editPattern), 'i')) !== null
            : true;
    }
    static protectPattern(str) {
        return str.replace(protectRegexp, '\\$&');
    }
    static formatSansUnicode(str) {
        for (const unicodePattern of unicodePatterns) {
            str = str.replace(unicodePattern.s, unicodePattern.l);
        }
        return str;
    }
    static formatPattern(str, editPattern) {
        str = Select2Utils.formatSansUnicode(Select2Utils.protectPattern(str));
        if (editPattern && typeof editPattern === 'function') {
            str = editPattern(str);
        }
        return str;
    }
}

let nextUniqueId = 0;
const displaySearchStatusList = ['default', 'hidden', 'always'];
class Select2 {
    constructor(_viewportRuler, _changeDetectorRef, _parentForm, _parentFormGroup, _control, tabIndex) {
        this._viewportRuler = _viewportRuler;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this._control = _control;
        this.minCharForSearch = 0;
        this.limitSelection = 0;
        this.listPosition = 'below';
        /** use the material style */
        this.styleMode = 'default';
        /** maximum results limit (0 = no limit) */
        this.maxResults = 0;
        /** message when maximum results */
        this.maxResultsMessage = 'Too many results…';
        /** infinite scroll distance */
        this.infiniteScrollDistance = 1.5;
        /** infinite scroll distance */
        this.infiniteScrollThrottle = 150;
        /** the max height of the results container when opening the select */
        this.resultMaxHeight = '200px';
        this.update = new EventEmitter();
        this.open = new EventEmitter();
        this.close = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.search = new EventEmitter();
        this.scroll = new EventEmitter();
        this.removeOption = new EventEmitter();
        this.option = null;
        this.isOpen = false;
        /** Whether the element is focused or not. */
        this.focused = false;
        this.hoveringValue = null;
        this.innerSearchText = '';
        this._stateChanges = new Subject();
        this._disabled = false;
        this._required = false;
        this._readonly = false;
        this._multiple = false;
        this._overlay = false;
        this._resettable = false;
        this._hideSelectedItems = false;
        this._clickDetection = false;
        this._uid = `select2-${nextUniqueId++}`;
        this._infiniteScroll = true;
        /** View -> model callback called when select has been touched */
        this._onTouched = () => {
            // do nothing
        };
        /** View -> model callback called when value changes */
        this._onChange = () => {
            // do nothing
        };
        // eslint-disable-next-line no-self-assign
        this.id = this.id;
        this._tabIndex = parseInt(tabIndex, 10) || 0;
        if (this._control) {
            this._control.valueAccessor = this;
        }
        this._clickDetectionFc = this.clickDetection.bind(this);
    }
    /** data of options & optiongrps */
    set data(data) {
        this._data = data;
        this.updateFilteredData();
    }
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = this._coerceBooleanProperty(value);
        this.ngOnInit();
    }
    /** use the material style */
    get overlay() {
        return this._overlay;
    }
    set overlay(value) {
        this._overlay = this._coerceBooleanProperty(value);
    }
    /** infinite scroll activated */
    get infiniteScroll() {
        return this._infiniteScroll;
    }
    set infiniteScroll(value) {
        this._infiniteScroll = this._coerceBooleanProperty(value);
    }
    get select2Options() {
        return this.multiple ? this.option : null;
    }
    get select2Option() {
        return this.multiple ? null : this.option;
    }
    get searchText() {
        return this.innerSearchText;
    }
    set searchText(text) {
        if (this.customSearchEnabled) {
            this.search.emit({
                component: this,
                value: this._value,
                search: text,
            });
        }
        this.innerSearchText = text;
    }
    /** minimal data of show the search field */
    get minCountForSearch() {
        return this._minCountForSearch;
    }
    set minCountForSearch(value) {
        this._minCountForSearch = value;
        this.updateSearchBox();
    }
    /** Unique id of the element. */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this._uid;
    }
    /** Whether the element is required. */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = this._coerceBooleanProperty(value);
    }
    /** Whether selected items should be hidden. */
    get disabled() {
        return this._control ? this._control.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = this._coerceBooleanProperty(value);
    }
    /** Whether items are hidden when has. */
    get hideSelectedItems() {
        return this._hideSelectedItems;
    }
    set hideSelectedItems(value) {
        this._hideSelectedItems = this._coerceBooleanProperty(value);
    }
    /** Whether the element is readonly. */
    get readonly() {
        return this._readonly;
    }
    set readonly(value) {
        this._readonly = this._coerceBooleanProperty(value);
    }
    /** The input element's value. */
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.testValueChange(this._value, value)) {
            setTimeout(() => {
                this._value = value;
                this.writeValue(value);
            }, 10);
        }
    }
    /** Tab index for the select2 element. */
    get tabIndex() {
        return this.disabled ? -1 : this._tabIndex;
    }
    set tabIndex(value) {
        if (typeof value !== 'undefined') {
            this._tabIndex = value;
        }
    }
    /** reset with no selected value */
    get resettable() {
        return this._resettable;
    }
    set resettable(value) {
        this._resettable = this._coerceBooleanProperty(value);
    }
    get ariaInvalid() {
        return this._isErrorState();
    }
    get classMaterial() {
        return this.styleMode === 'material';
    }
    get classNostyle() {
        return this.styleMode === 'noStyle';
    }
    get select2above() {
        return !this.overlay ? this.listPosition === 'above' : this._isAbobeOverlay();
    }
    get _positions() {
        if (this.listPosition === 'auto') {
            [
                {
                    originX: 'start',
                    originY: 'bottom',
                    overlayX: 'start',
                    overlayY: 'bottom',
                },
                {
                    originX: 'start',
                    originY: 'top',
                    overlayX: 'start',
                    overlayY: 'top',
                },
            ];
        }
        else {
            return null;
        }
    }
    get resultsElement() {
        var _a;
        return (_a = this.resultContainer) === null || _a === void 0 ? void 0 : _a.nativeElement;
    }
    ngOnInit() {
        this._viewportRuler.change(100).subscribe(() => {
            if (this.isOpen) {
                this.triggerRect();
            }
        });
        const option = Select2Utils.getOptionsByValue(this._data, this._control ? this._control.value : this.value, this.multiple);
        if (option !== null) {
            this.option = option;
        }
        if (!Array.isArray(option)) {
            this.hoveringValue = this.value;
        }
        this.updateSearchBox();
    }
    ngAfterViewInit() {
        this.cdkConnectedOverlay.positionChange.subscribe((posChange) => {
            var _a;
            if (this.listPosition === 'auto' &&
                ((_a = posChange.connectionPair) === null || _a === void 0 ? void 0 : _a.originY) &&
                this._overlayPosition !== posChange.connectionPair.originY) {
                this.triggerRect();
                this._overlayPosition = posChange.connectionPair.originY;
                this._changeDetectorRef.detectChanges();
            }
        });
        this.selectionElement = this.selection.nativeElement;
        this.triggerRect();
    }
    ngDoCheck() {
        var _a;
        this.updateSearchBox();
        this._dirtyCheckNativeValue();
        if (this._triggerRect) {
            if (this.overlayWidth !== this._triggerRect.width) {
                this.overlayWidth = this._triggerRect.width;
            }
            if (((_a = this._dropdownRect) === null || _a === void 0 ? void 0 : _a.height) > 0 && this.overlayHeight !== this._dropdownRect.height) {
                this.overlayHeight = this.listPosition === 'auto' ? this._dropdownRect.height : 0;
            }
        }
    }
    ngOnDestroy() {
        window.document.body.removeEventListener('click', this._clickDetectionFc);
    }
    updateSearchBox() {
        const hidden = this.customSearchEnabled
            ? false
            : Select2Utils.isSearchboxHiddex(this._data, this._minCountForSearch);
        if (this.isSearchboxHidden !== hidden) {
            this.isSearchboxHidden = hidden;
        }
    }
    hideSearch() {
        const displaySearchStatus = displaySearchStatusList.indexOf(this.displaySearchStatus) > -1 ? this.displaySearchStatus : 'default';
        return (displaySearchStatus === 'default' && this.isSearchboxHidden) || displaySearchStatus === 'hidden';
    }
    getOptionStyle(option) {
        return ('select2-results__option ' +
            (option.hide ? 'select2-results__option--hide ' : '') +
            (option.value === this.hoveringValue ? 'select2-results__option--highlighted ' : '') +
            (option.classes || ''));
    }
    mouseenter(option) {
        if (!option.disabled) {
            this.hoveringValue = option.value;
        }
    }
    click(option) {
        if (this.testSelection(option)) {
            this.select(option);
        }
    }
    reset(e) {
        this.select(null);
        e.preventDefault();
        e.stopPropagation();
    }
    prevChange(event) {
        event.stopPropagation();
    }
    toggleOpenAndClose() {
        if (this.disabled) {
            return;
        }
        this._focus(true);
        this.isOpen = !this.isOpen;
        if (this.isOpen) {
            this.innerSearchText = '';
            this.updateFilteredData();
            this._focusSearchboxOrResultsElement();
            setTimeout(() => {
                if (this.option) {
                    const option = this.option instanceof Array ? this.option[0] : this.option;
                    this.updateScrollFromOption(option);
                }
                else if (this.resultsElement) {
                    this.resultsElement.scrollTop = 0;
                }
                setTimeout(() => {
                    var _a, _b;
                    this.triggerRect();
                    (_b = (_a = this.cdkConnectedOverlay) === null || _a === void 0 ? void 0 : _a.overlayRef) === null || _b === void 0 ? void 0 : _b.updatePosition();
                }, 100);
            });
            this.open.emit(this);
        }
        else {
            this.close.emit(this);
        }
        if (this.isOpen && !this._clickDetection) {
            setTimeout(() => {
                window.document.body.addEventListener('click', this._clickDetectionFc, false);
                this._clickDetection = true;
            }, timeout);
        }
        this._changeDetectorRef.markForCheck();
    }
    hasTemplate(option, defaut) {
        var _a, _b;
        return (this.templates instanceof TemplateRef ||
            ((_a = this.templates) === null || _a === void 0 ? void 0 : _a[option.templateId]) instanceof TemplateRef ||
            ((_b = this.templates) === null || _b === void 0 ? void 0 : _b[defaut]) instanceof TemplateRef);
    }
    getTemplate(option, defaut) {
        return this.hasTemplate(option, defaut)
            ? this.templates[option.templateId] || this.templates[defaut] || this.templates
            : undefined;
    }
    triggerRect() {
        var _a;
        this._triggerRect = this.selectionElement.getBoundingClientRect();
        this._dropdownRect = ((_a = this.dropdown) === null || _a === void 0 ? void 0 : _a.nativeElement)
            ? this.dropdown.nativeElement.getBoundingClientRect()
            : undefined;
    }
    testSelection(option) {
        if (option.disabled) {
            return false;
        }
        if (!this.multiple ||
            !this.limitSelection ||
            (Array.isArray(this._value) && this._value.length < this.limitSelection)) {
            return true;
        }
        return false;
    }
    testValueChange(value1, value2) {
        if (((value1 === null || value1 === undefined) && (value2 === null || value2 === undefined)) ||
            value1 === value2) {
            return false;
        }
        if (this.multiple &&
            (value1 === null || value1 === void 0 ? void 0 : value1.length) &&
            (value2 === null || value2 === void 0 ? void 0 : value2.length) &&
            value1.length === value2.length) {
            for (const e1 of value1) {
                const test = value2.indexOf(e1) > -1;
                if (!test) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }
    updateFilteredData() {
        setTimeout(() => {
            let result = this._data;
            if (this.multiple && this.hideSelectedItems) {
                result = Select2Utils.getFilteredSelectedData(result, this.option);
            }
            if (!this.customSearchEnabled && this.searchText && this.searchText.length >= +this.minCharForSearch) {
                result = Select2Utils.getFilteredData(result, this.searchText, this.editPattern);
            }
            if (this.maxResults > 0) {
                const data = Select2Utils.getReduceData(result, +this.maxResults);
                result = data.result;
                this.maxResultsExceeded = data.reduce;
            }
            else {
                this.maxResultsExceeded = false;
            }
            if (Select2Utils.valueIsNotInFilteredData(result, this.hoveringValue)) {
                this.hoveringValue = Select2Utils.getFirstAvailableOption(result);
            }
            this.filteredData = result;
            this._changeDetectorRef.markForCheck();
        });
    }
    clickDetection(e) {
        if (!this.ifParentContainsClass(e.target, 'selection')) {
            if (this.isOpen && !this.ifParentContainsClass(e.target, 'select2-dropdown')) {
                this.toggleOpenAndClose();
            }
            if (!this.ifParentContainsId(e.target, this._id)) {
                this.clickExit();
            }
        }
        else if (this.isOpen && !this.ifParentContainsId(e.target, this._id)) {
            this.toggleOpenAndClose();
            this.clickExit();
        }
    }
    clickExit() {
        this._focus(false);
        window.document.body.removeEventListener('click', this._clickDetectionFc);
        this._clickDetection = false;
    }
    ifParentContainsClass(element, cssClass) {
        return this.getParentElementByClass(element, cssClass) !== null;
    }
    ifParentContainsId(element, id) {
        return this.getParentElementById(element, id) !== null;
    }
    getParentElementByClass(element, cssClass) {
        if (this.containClasses(element, cssClass.trim().split(/\s+/))) {
            return element;
        }
        return element.parentElement ? this.getParentElementByClass(element.parentElement, cssClass) : null;
    }
    getParentElementById(element, id) {
        if (element.id === id) {
            return element;
        }
        return element.parentElement ? this.getParentElementById(element.parentElement, id) : null;
    }
    containClasses(element, cssClasses) {
        if (!element.classList) {
            return false;
        }
        for (const cssClass of cssClasses) {
            if (!element.classList.contains(cssClass)) {
                return false;
            }
        }
        return true;
    }
    focusin() {
        if (!this.disabled) {
            this._focus(true);
        }
    }
    focusout() {
        if (this.selectionElement && !this.selectionElement.classList.contains('select2-focused')) {
            this._focus(false);
            this._onTouched();
        }
    }
    select(option) {
        let value;
        if (option !== null) {
            if (this.multiple) {
                const options = this.option;
                const index = options.findIndex(op => op.value === option.value);
                if (index === -1) {
                    options.push(option);
                }
                else {
                    options.splice(index, 1);
                }
                value = this.option.map(op => op.value);
            }
            else {
                this.option = option;
                if (this.isOpen) {
                    this.isOpen = false;
                    this.close.emit(this);
                    if (this.selectionElement) {
                        this.selectionElement.focus();
                    }
                }
                value = this.option.value;
            }
        }
        else {
            this.option = null;
        }
        if (this.multiple && this.hideSelectedItems) {
            this.updateFilteredData();
        }
        if (this._control) {
            this._onChange(value);
        }
        else {
            this._value = value;
        }
        this.update.emit({
            component: this,
            value: value,
            options: Array.isArray(this.option) ? this.option : this.option ? [this.option] : null,
        });
    }
    keyDown(e) {
        if (this._testKey(e, ['ArrowDown', 40])) {
            this.moveDown();
            e.preventDefault();
        }
        else if (this._testKey(e, ['ArrowUp', 38])) {
            this.moveUp();
            e.preventDefault();
        }
        else if (this._testKey(e, ['Enter', 13])) {
            this.selectByEnter();
            e.preventDefault();
        }
        else if (this._testKey(e, ['Escape', 'Tab', 9, 27]) && this.isOpen) {
            this.toggleOpenAndClose();
            this._focus(false);
        }
    }
    openKey(e) {
        if (this._testKey(e, ['ArrowDown', 'ArrowUp', 'Enter', 40, 38, 13])) {
            this.toggleOpenAndClose();
            e.preventDefault();
        }
        else if (this._testKey(e, ['Escape', 'Tab', 9, 27])) {
            this._focus(false);
            this._onTouched();
        }
    }
    trackBy(_index, item) {
        return item.value;
    }
    searchUpdate(e) {
        this.searchText = e.target.value;
        this.updateFilteredData();
    }
    isSelected(option) {
        return Select2Utils.isSelected(this.option, option, this.multiple);
    }
    isDisabled(option) {
        return option.disabled ? 'true' : 'false';
    }
    removeSelection(e, option) {
        Select2Utils.removeSelection(this.option, option);
        if (this.multiple && this.hideSelectedItems) {
            this.updateFilteredData();
        }
        const value = this.option.map(op => op.value);
        if (this._control) {
            this._onChange(value);
        }
        else {
            this._value = value;
        }
        this.update.emit({
            component: this,
            value: value,
            options: Array.isArray(this.option) ? this.option : this.option ? [this.option] : null,
        });
        this.removeOption.emit({
            component: this,
            value: value,
            removedOption: option,
        });
        e.preventDefault();
        e.stopPropagation();
        if (this.isOpen) {
            this._focusSearchboxOrResultsElement();
        }
    }
    /**
     * Sets the model value. Implemented as part of ControlValueAccessor.
     * @param value
     */
    writeValue(value) {
        this._setSelectionByValue(value);
    }
    /**
     * Saves a callback function to be invoked when the select's value
     * changes from user input. Part of the ControlValueAccessor interface
     * required to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the value changes.
     */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /**
     * Saves a callback function to be invoked when the select is blurred
     * by the user. Part of the ControlValueAccessor interface required
     * to integrate with Angular's core forms API.
     *
     * @param fn Callback to be triggered when the component has been touched.
     */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    /**
     * Sets whether the component should be disabled.
     * Implemented as part of ControlValueAccessor.
     * @param isDisabled
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    onScroll(way) {
        this.scroll.emit({
            component: this,
            way,
            search: this.innerSearchText,
        });
    }
    _isErrorState() {
        const isInvalid = this._control && this._control.invalid;
        const isTouched = this._control && this._control.touched;
        const isSubmitted = (this._parentFormGroup && this._parentFormGroup.submitted) ||
            (this._parentForm && this._parentForm.submitted);
        return !!(isInvalid && (isTouched || isSubmitted));
    }
    moveUp() {
        this.updateScrollFromOption(Select2Utils.getPreviousOption(this.filteredData, this.hoveringValue));
    }
    moveDown() {
        this.updateScrollFromOption(Select2Utils.getNextOption(this.filteredData, this.hoveringValue));
    }
    updateScrollFromOption(option) {
        if (option) {
            this.hoveringValue = option.value;
            const domElement = this.results.find(r => r.nativeElement.innerText.trim() === option.label);
            if (domElement && this.resultsElement) {
                this.resultsElement.scrollTop = 0;
                const listClientRect = this.resultsElement.getBoundingClientRect();
                const optionClientRect = domElement.nativeElement.getBoundingClientRect();
                this.resultsElement.scrollTop = optionClientRect.top - listClientRect.top;
            }
        }
    }
    selectByEnter() {
        if (this.hoveringValue) {
            const option = Select2Utils.getOptionByValue(this._data, this.hoveringValue);
            this.select(option);
        }
    }
    _testKey(event, refs = []) {
        return this._isKey(this._getKey(event), refs);
    }
    _getKey(event) {
        let code;
        if (event.key !== undefined) {
            code = event.key;
        }
        else if (event['keyIdentifier'] !== undefined) {
            code = event['keyIdentifier'];
        }
        else if (event['keyCode'] !== undefined) {
            code = event['keyCode'];
        }
        else {
            event.preventDefault();
        }
        return code;
    }
    _isKey(code, refs = []) {
        return refs && refs.length > 0 ? refs.indexOf(code) !== -1 : false;
    }
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    _setSelectionByValue(value) {
        if (this.option || (value !== undefined && value !== null)) {
            const isArray = Array.isArray(value);
            if (this.multiple && value && !isArray) {
                throw new Error('Non array value.');
            }
            else if (this._data) {
                if (this.multiple) {
                    this.option = []; // if value is null, then empty option and return
                    if (isArray) {
                        // value is not null. Preselect value
                        const selectedValues = Select2Utils.getOptionsByValue(this._data, value, this.multiple);
                        selectedValues.map(item => this.select(item));
                    }
                }
                else {
                    this.select(Select2Utils.getOptionByValue(this._data, value));
                }
            }
            else if (this._control) {
                this._control.viewToModelUpdate(value);
            }
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Does some manual dirty checking on the native input `value` property. */
    _dirtyCheckNativeValue() {
        const newValue = this.value;
        if (this._previousNativeValue !== newValue) {
            this._previousNativeValue = newValue;
            this._stateChanges.next();
        }
    }
    _coerceBooleanProperty(value) {
        return value != null && `${value}` !== 'false';
    }
    _focusSearchboxOrResultsElement() {
        if (!this.isSearchboxHidden) {
            setTimeout(() => {
                if (this.searchInput && this.searchInput.nativeElement) {
                    this.searchInput.nativeElement.focus();
                }
            });
        }
        else if (this.resultsElement) {
            this.resultsElement.focus();
        }
    }
    _focus(state) {
        if (!state && this.focused) {
            this.focused = state;
            this.blur.emit(this);
        }
        else if (state && !this.focused) {
            this.focused = state;
            this.focus.emit(this);
        }
    }
    _isAbobeOverlay() {
        return this.overlay && this._overlayPosition && this.listPosition === 'auto'
            ? this._overlayPosition === 'top'
            : this.listPosition === 'above';
    }
}
/** @nocollapse */ Select2.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i2.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ Select2.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "14.1.0", type: Select2, selector: "select2", inputs: { data: "data", minCharForSearch: "minCharForSearch", displaySearchStatus: "displaySearchStatus", placeholder: "placeholder", customSearchEnabled: "customSearchEnabled", limitSelection: "limitSelection", listPosition: "listPosition", multiple: "multiple", overlay: "overlay", styleMode: "styleMode", noResultMessage: "noResultMessage", maxResults: "maxResults", maxResultsMessage: "maxResultsMessage", infiniteScrollDistance: "infiniteScrollDistance", infiniteScrollThrottle: "infiniteScrollThrottle", infiniteScroll: "infiniteScroll", editPattern: "editPattern", templates: "templates", resultMaxHeight: "resultMaxHeight", minCountForSearch: "minCountForSearch", id: "id", required: "required", disabled: "disabled", hideSelectedItems: "hideSelectedItems", readonly: "readonly", value: "value", tabIndex: "tabIndex", resettable: "resettable" }, outputs: { update: "update", open: "open", close: "close", focus: "focus", blur: "blur", search: "search", scroll: "scroll", removeOption: "removeOption" }, host: { properties: { "id": "this.id", "attr.aria-invalid": "this.ariaInvalid", "class.material": "this.classMaterial", "class.nostyle": "this.classNostyle", "class.select2-above": "this.select2above" } }, viewQueries: [{ propertyName: "cdkConnectedOverlay", first: true, predicate: CdkConnectedOverlay, descendants: true }, { propertyName: "selection", first: true, predicate: ["selection"], descendants: true, static: true }, { propertyName: "resultContainer", first: true, predicate: ["results"], descendants: true }, { propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true }, { propertyName: "dropdown", first: true, predicate: ["dropdown"], descendants: true }, { propertyName: "results", predicate: ["result"], descendants: true }], ngImport: i0, template: "<div class=\"select2-label\" (click)=\"toggleOpenAndClose()\">\n    <ng-content select=\"select2-label\"></ng-content>\n    <span *ngIf=\"required\" class=\"select2-required\"></span>\n</div>\n<div\n    class=\"select2 select2-container select2-container--default select2-container--focus\"\n    [class.select2-container--below]=\"!select2above\"\n    [class.select2-container--above]=\"select2above\"\n    [class.select2-container--open]=\"isOpen\"\n    [class.select2-container--disabled]=\"disabled\"\n>\n    <div\n        class=\"selection\"\n        #selection\n        #trigger=\"cdkOverlayOrigin\"\n        [attr.tabindex]=\"!this.isOpen ? tabIndex : '-1'\"\n        (click)=\"toggleOpenAndClose()\"\n        (focus)=\"focusin()\"\n        (blur)=\"focusout()\"\n        (keydown)=\"openKey($event)\"\n        cdkOverlayOrigin\n        [class.select2-focused]=\"focused\"\n    >\n        <div\n            class=\"select2-selection\"\n            [class.select2-selection--multiple]=\"multiple\"\n            [class.select2-selection--single]=\"!multiple\"\n            role=\"combobox\"\n        >\n            <span *ngIf=\"!multiple\" class=\"select2-selection__rendered\" [title]=\"select2Option?.label || ''\">\n                <span *ngIf=\"!select2Option\">&nbsp;</span>\n                <span *ngIf=\"select2Option\" [innerHTML]=\"select2Option.label\"></span>\n                <span [class.select2-selection__placeholder__option]=\"option\" class=\"select2-selection__placeholder\">{{\n                    placeholder\n                }}</span>\n            </span>\n            <span\n                (click)=\"reset($event)\"\n                *ngIf=\"!multiple && resettable && select2Option && !(disabled || readonly)\"\n                class=\"select2-selection__reset\"\n                role=\"presentation\"\n                >\u00D7</span\n            >\n            <span *ngIf=\"!multiple\" class=\"select2-selection__arrow\" role=\"presentation\"> </span>\n            <ul *ngIf=\"multiple\" class=\"select2-selection__rendered\">\n                <span\n                    [class.select2-selection__placeholder__option]=\"select2Options?.length > 0\"\n                    class=\"select2-selection__placeholder\"\n                    >{{ placeholder }}</span\n                >\n                <li *ngFor=\"let op of option; trackBy: trackBy\" class=\"select2-selection__choice\" [title]=\"op.label\">\n                    <span\n                        *ngIf=\"!(disabled || readonly)\"\n                        (click)=\"removeSelection($event, op)\"\n                        class=\"select2-selection__choice__remove\"\n                        role=\"presentation\"\n                        >\u00D7</span\n                    >\n                    <span [innerHTML]=\"op.label\"></span>\n                </li>\n            </ul>\n        </div>\n    </div>\n    <ng-container *ngIf=\"!overlay\">\n        <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n    </ng-container>\n\n    <div class=\"select2-subscript-wrapper\">\n        <ng-content select=\"select2-hint\"></ng-content>\n    </div>\n</div>\n\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayBackdropClass=\"select2-overlay-backdrop\"\n    [cdkConnectedOverlayOrigin]=\"trigger\"\n    [cdkConnectedOverlayOpen]=\"this.isOpen && overlay\"\n    [cdkConnectedOverlayMinWidth]=\"overlayWidth\"\n    [cdkConnectedOverlayHeight]=\"overlayHeight\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    (backdropClick)=\"toggleOpenAndClose()\"\n>\n    <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n</ng-template>\n\n<ng-template #containerTemplate>\n    <div\n        class=\"select2-container select2-container--default select2-container-dropdown\"\n        [class.select2-container--open]=\"isOpen\"\n        [class.select2-overlay]=\"overlay\"\n        [class.select2-position-auto]=\"listPosition === 'auto'\"\n    >\n        <div\n            #dropdown\n            class=\"select2-dropdown\"\n            [class.select2-dropdown--below]=\"!select2above\"\n            [class.select2-dropdown--above]=\"select2above\"\n        >\n            <div class=\"select2-search select2-search--dropdown\" [class.select2-search--hide]=\"hideSearch()\">\n                <input\n                    #searchInput\n                    [id]=\"id + '-search-field'\"\n                    [value]=\"searchText\"\n                    (keydown)=\"keyDown($event)\"\n                    (keyup)=\"searchUpdate($event)\"\n                    (change)=\"prevChange($event)\"\n                    class=\"select2-search__field\"\n                    type=\"search\"\n                    role=\"textbox\"\n                    autocomplete=\"off\"\n                    autocorrect=\"off\"\n                    autocapitalize=\"off\"\n                    spellcheck=\"false\"\n                    [attr.tabindex]=\"this.isOpen ? tabIndex : '-1'\"\n                />\n            </div>\n            <div class=\"select2-results\">\n                <ul\n                    #results\n                    class=\"select2-results__options\"\n                    [style.max-height]=\"resultMaxHeight\"\n                    role=\"tree\"\n                    tabindex=\"-1\"\n                    infiniteScroll\n                    [infiniteScrollDisabled]=\"!infiniteScroll && !isOpen\"\n                    [infiniteScrollDistance]=\"infiniteScrollDistance\"\n                    [infiniteScrollThrottle]=\"infiniteScrollThrottle\"\n                    [infiniteScrollContainer]=\"results\"\n                    (scrolled)=\"onScroll('down')\"\n                    (scrolledUp)=\"onScroll('up')\"\n                    (keydown)=\"keyDown($event)\"\n                >\n                    <ng-container *ngFor=\"let groupOrOption of filteredData; index as i; trackBy: trackBy\">\n                        <li *ngIf=\"groupOrOption.options\" class=\"select2-results__option\" role=\"group\">\n                            <strong\n                                *ngIf=\"!hasTemplate(groupOrOption, 'group'); else optGroup\"\n                                [attr.class]=\"\n                                    'select2-results__group' +\n                                    (groupOrOption.classes ? ' ' + groupOrOption.classes : '')\n                                \"\n                                [innerHTML]=\"groupOrOption.label\"\n                            ></strong>\n                            <ng-template #optGroup>\n                                <ng-container\n                                    *ngTemplateOutlet=\"getTemplate(groupOrOption, 'group'); context: groupOrOption\"\n                                >\n                                </ng-container>\n                            </ng-template>\n\n                            <ul class=\"select2-results__options select2-results__options--nested\">\n                                <li\n                                    *ngFor=\"let option of groupOrOption.options; index as j; trackBy: trackBy\"\n                                    #result\n                                    [id]=\"option.id || id + '-option-' + i + '-' + j\"\n                                    [class]=\"getOptionStyle(option)\"\n                                    role=\"treeitem\"\n                                    [attr.aria-selected]=\"isSelected(option)\"\n                                    [attr.aria-disabled]=\"isDisabled(option)\"\n                                    (mouseenter)=\"mouseenter(option)\"\n                                    (click)=\"click(option)\"\n                                >\n                                    <div\n                                        *ngIf=\"!hasTemplate(option, 'option'); else liGroup\"\n                                        class=\"select2-label-content\"\n                                        [innerHTML]=\"option.label\"\n                                    ></div>\n                                    <ng-template #liGroup>\n                                        <ng-container\n                                            *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\"\n                                        >\n                                        </ng-container>\n                                    </ng-template>\n                                </li>\n                            </ul>\n                        </li>\n                        <li\n                            *ngIf=\"!groupOrOption.options\"\n                            #result\n                            [id]=\"groupOrOption.id || id + '-option-' + i\"\n                            [class]=\"getOptionStyle(groupOrOption)\"\n                            role=\"treeitem\"\n                            [attr.aria-selected]=\"isSelected(groupOrOption)\"\n                            [attr.aria-disabled]=\"isDisabled(groupOrOption)\"\n                            (mouseenter)=\"mouseenter(groupOrOption)\"\n                            (click)=\"click(groupOrOption)\"\n                        >\n                            <div\n                                *ngIf=\"!hasTemplate(groupOrOption, 'option'); else li\"\n                                [innerHTML]=\"groupOrOption.label\"\n                                class=\"select2-label-content\"\n                            ></div>\n                            <ng-template #li>\n                                <ng-container\n                                    *ngTemplateOutlet=\"getTemplate(groupOrOption, 'option'); context: groupOrOption\"\n                                >\n                                </ng-container>\n                            </ng-template>\n                        </li>\n                    </ng-container>\n                    <li\n                        class=\"select2-no-result select2-results__option\"\n                        *ngIf=\"!filteredData?.length && noResultMessage\"\n                        [innerHTML]=\"noResultMessage\"\n                    ></li>\n                    <li\n                        class=\"select2-too-much-result select2-results__option\"\n                        *ngIf=\"maxResultsExceeded\"\n                        [innerHTML]=\"maxResultsMessage\"\n                    ></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</ng-template>\n", styles: [".select2-label{color:#000;color:var(--select2-label-text-color, #000)}.select2-container{box-sizing:border-box;display:inline-block;margin:0;position:relative;vertical-align:middle;width:100%}.select2-container .select2-container-dropdown{position:absolute;width:0px;opacity:0}.select2-container .select2-selection--single{box-sizing:border-box;cursor:pointer;display:block;height:28px;-webkit-user-select:none;user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;padding:0 0 0 8px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;flex:1 1 auto}.select2-container .select2-selection--single .select2-selection__clear{position:relative}.select2-container .select2-selection--multiple{box-sizing:border-box;cursor:pointer;display:block;min-height:32px;-webkit-user-select:none;user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline-block;overflow:hidden;padding-left:8px;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-search--inline{float:left}.select2-container .select2-search--inline .select2-search__field{box-sizing:border-box;border:none;font-size:100%;margin-top:5px;padding:0}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{background:white;background:var(--select2-dropdown-background, white);border:1px solid #aaa;border:1px solid var(--select2-dropdown-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);box-sizing:border-box;display:block;position:absolute;width:100%;z-index:1051;height:0;overflow:hidden}.select2-dropdown .select2-label-content{display:contents}.select2-results{display:block}.select2-results__options{list-style:none;margin:0;padding:0}.select2-results__option{padding:6px;-webkit-user-select:none;user-select:none;color:#000;color:var(--select2-option-text-color, #000)}.select2-results__option[aria-selected]{cursor:pointer}.select2-container.select2-container-dropdown.select2-container--open{width:100%;opacity:1}.select2-container--open .select2-dropdown{overflow:auto;height:auto}.select2-container--open .select2-dropdown--above{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0;bottom:27px;display:flex;flex-direction:column-reverse}.select2-container--open .select2-dropdown--below{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{padding:4px;width:100%;box-sizing:border-box}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{border:0;margin:0;padding:0;display:block;position:fixed;left:0;top:0;min-height:100%;min-width:100%;height:auto;width:auto;opacity:0;z-index:99;background:#fff;filter:alpha(opacity=0)}.select2-required:before{content:\"*\";color:red;color:var(--select2-required-color, red)}.select2-hidden-accessible{border:0!important;clip:rect(0 0 0 0)!important;height:1px!important;margin:-1px!important;overflow:hidden!important;padding:0!important;position:absolute!important;width:1px!important}.select2-container--default .select2-selection--single{background:#fff;background:var(--select2-selection-background, #fff);border:1px solid #aaa;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);display:flex}.select2-container--default .select2-selection--single .select2-selection__rendered{color:#444;color:var(--select2-selection-text-color, #444);line-height:28px}.select2-container--default .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:700}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:#999;color:var(--select2-placeholder-color, #999)}.select2-container--default .select2-selection--single .select2-selection__placeholder span{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;text-overflow:var(--select2-placeholder-overflow, ellipsis)}.select2-container--default .select2-selection--single .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--single .select2-selection__reset,.select2-container--default .select2-selection--single .select2-selection__arrow{display:flex;width:20px;align-items:center;justify-content:center}.select2-container--default .select2-selection--single .select2-selection__arrow:before{content:\" \";border-color:#888 transparent;border-color:var(--select2-arrow-color, #888) transparent;border-style:solid;border-width:5px 4px 0;height:0;width:0}.select2-container--default .select2-selection--single .select2-selection__reset{color:#999;color:var(--select2-reset-color, #999)}.select2-container--default.select2-container--disabled .select2-selection--single{background:#eee;background:var(--select2-selection-disabled-background, #eee);cursor:default}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear{display:none}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow:before{border-color:transparent transparent #888;border-color:transparent transparent var(--select2-arrow-color, #888);border-width:0 4px 5px}.select2-container--default .select2-selection--multiple{background:#fff;background:var(--select2-selection-background, #fff);border:1px solid #aaa;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);cursor:text}.select2-container--default .select2-selection--multiple .select2-selection__rendered{flex:1 1 auto;box-sizing:border-box;list-style:none;margin:0;padding:0 5px;width:100%}.select2-container--default .select2-selection--multiple .select2-selection__rendered li{list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;width:100%;color:#999;color:var(--select2-placeholder-color, #999);margin-top:5px;float:left;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;text-overflow:var(--select2-placeholder-overflow, ellipsis)}.select2-container--default .select2-selection--multiple .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--multiple .select2-selection__clear{cursor:pointer;float:right;font-weight:700;margin-top:5px;margin-right:10px}.select2-container--default .select2-selection--multiple .select2-selection__choice{color:#000;color:var(--select2-selection-choice-text-color, #000);background:#e4e4e4;background:var(--select2-selection-choice-background, #e4e4e4);border:1px solid #aaa;border:1px solid var(--select2-selection-choice-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);cursor:default;float:left;margin-right:5px;margin-top:5px;padding:0 5px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{color:#999;color:var(--select2-selection-choice-close-color, #999);cursor:pointer;display:inline-block;font-weight:700;margin-right:2px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover{color:#333;color:var(--select2-selection-choice-hover-close-color, #333)}.select2-container--default.select2-container--focused .select2-selection--multiple{border:solid #000 1px;border:solid var(--select2-selection-focus-border-color, #000) 1px;outline:none}.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{border:solid #000 1px;border:solid var(--select2-selection-focus-border-color, #000) 1px;outline:none}.select2-container--default.select2-container--disabled .select2-selection--multiple{background:#eee;background:var(--select2-selection-disabled-background, #eee);cursor:default}.select2-container--default.select2-container--disabled .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--open.select2-container--above .select2-selection--single,.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple{border-top-left-radius:0;border-top-right-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--single,.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid #aaa;border:1px solid var(--select2-search-border-color, #aaa);background:#fff;background:1px solid var(--select2-search-background, #fff);border-radius:0;border-radius:var(--select2-search-border-radius, 0px)}.select2-container--default .select2-search--inline .select2-search__field{background:transparent;border:none;outline:none;box-shadow:none;-webkit-appearance:textfield}.select2-container--default .select2-results>.select2-results__options{overflow-y:auto}.select2-container--default .select2-results__option[role=group]{padding:0}.select2-container--default .select2-results__option[aria-disabled=true]{color:#999;color:var(--select2-option-disabled-text-color, #999);background:transparent;background:var(--select2-option-disabled-background, transparent)}.select2-container--default .select2-results__option[aria-selected=true]{color:#000;color:var(--select2-option-selected-text-color, #000);background:#ddd;background:var(--select2-option-selected-background, #ddd)}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--highlighted[aria-selected]{background:#5897fb;background:var(--select2-option-highlighted-background, #5897fb);color:#fff;color:var(--select2-option-highlighted-text-color, #fff)}.select2-container--default .select2-results__option--hide{display:none}.select2-container--default .select2-results__group{cursor:default;display:block;padding:6px;color:gray;color:var(--select2-option-group-text-color, gray);background:transparent;background:var(--select2-option-group-background, transparent)}.select2-no-result{color:#888;color:var(--select2-no-result-color, #888);font-style:italic;font-style:var(--select2-no-result-font-style, italic)}.select2-too-much-result{color:#888;color:var(--select2-too-much-result-color, #888);font-style:italic;font-style:var(--select2-too-much-font-style, italic)}:host.nostyle .select2-dropdown{border-color:transparent}:host.nostyle .select2-selection--single,:host.nostyle .select2-selection--multiple{background:transparent;border-color:transparent}:host.nostyle .select2-container--default .select2-focused .select2-selection--single,:host.nostyle .select2-container--default .select2-focused .select2-selection--multiple,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{background:transparent;border-color:transparent}:host.material{display:inline-block;width:300px}:host.material>.select2-container{padding-bottom:1.29688em;vertical-align:inherit}:host.material>.select2-container .selection{padding:.4375em 0;border-top:.84375em solid transparent;display:inline-flex;align-items:baseline;width:100%;height:auto}:host.material .select2-container--default .select2-selection--single,:host.material .select2-container--default .select2-selection--multiple{width:100%;border:0;border-radius:0;height:24px;box-sizing:border-box}:host.material .select2-container--default .select2-selection--single:before,:host.material .select2-container--default .select2-selection--multiple:before{content:\" \";display:block;position:absolute;bottom:1.65em;background:#ddd;background:var(--select2-material-underline, #ddd);height:1px;width:100%}:host.material .select2-container--default .select2-selection--single:after,:host.material .select2-container--default .select2-selection--multiple:after{content:\" \";display:block;position:absolute;bottom:1.63em;background:#5a419e;background:var(--select2-material-underline-active, #5a419e);height:2px;width:0%;left:50%;transition:none}:host.material .select2-container--default .select2-selection--single .select2-selection__rendered,:host.material .select2-container--default .select2-selection--multiple .select2-selection__rendered{padding-left:1px;line-height:inherit}:host.material .select2-container--default .select2-selection--single .select2-selection__placeholder,:host.material .select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;color:#00000061;color:var(--select2-material-placeholder-color, rgba(0, 0, 0, .38));transition:transform .3s;position:absolute;transform-origin:0 21px;left:0;top:20px}:host.material .select2-container--default .select2-container--open{left:0;bottom:1.6em}:host.material .select2-container--default .select2-selection__placeholder__option{transform:translateY(-1.5em) scale(.75) perspective(100px) translateZ(.001px);width:133.33333%}:host.material .select2-container--default .select2-selection__arrow{top:20px}:host.material .select2-container--default.select2-container--open .select2-selection--single:after,:host.material .select2-container--default.select2-container--open .select2-selection--multiple:after,:host.material .select2-container--default .select2-focused .select2-selection--single:after,:host.material .select2-container--default .select2-focused .select2-selection--multiple:after{transition:width .3s cubic-bezier(.12,1,.77,1),left .3s cubic-bezier(.12,1,.77,1);width:100%;left:0%}:host.material .select2-container--default .select2-dropdown{border-radius:0;border:0;box-shadow:0 5px 5px #00000080}:host.material .select2-container--default .select2-results__option[aria-selected=true],:host.material .select2-container--default .select2-results__option--highlighted[aria-selected]{background:rgba(0,0,0,.04);background:var(--select2-material-option-selected-background, rgba(0, 0, 0, .04));color:#000;color:var(--select2-material-option-highlighted-text-color, #000)}:host.material .select2-container--default .select2-results__option[aria-selected=true]{color:#ff5722;color:var(--select2-material-option-selected-text-color, #ff5722)}:host.material .select2-container--default.select2-container--disabled .select2-selection--single,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple{background:transparent}:host.material .select2-container--default.select2-container--disabled .select2-selection--single:before,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple:before{background:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background:var(--select2-material-underline-disabled, linear-gradient(to right, rgba(0, 0, 0, .26) 0, rgba(0, 0, 0, .26) 33%, transparent 0));background-size:4px 1px;background-repeat:repeat-x;background-position:0 bottom}:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:after,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:after{background:red;background:var(--select2-material-underline-invalid, red)}:host.material:not(.select2-container--open) .select2-focused .select2-selection--single,:host.material:not(.select2-container--open) .select2-focused .select2-selection--multiple{border:0}:host.material .select2-subscript-wrapper{position:absolute;top:calc(100% - 1.72917em);font-size:75%;color:#888;color:var(--select2-hint-text-color, #888)}::ng-deep .select2-overlay-backdrop{background:rgba(0,0,0,.32);background:var(--select2-overlay-backdrop, transparent)}::ng-deep .cdk-overlay-container .select2-container .select2-dropdown.select2-dropdown--above{bottom:28px}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown{margin-bottom:28px}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown.select2-dropdown--above{bottom:0;margin-bottom:0;margin-top:28px}@supports (-moz-appearance: none){select2.material .select2-container--default .select2-selection--single,select2.material .select2-container--default .select2-selection--multiple{height:26px}}@supports (-ms-scroll-limit: 0){select2.material .select2-container--default .select2-selection--single,select2.material .select2-container--default .select2-selection--multiple{height:25px}}\n"], dependencies: [{ kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i4.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "directive", type: i4.CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }, { kind: "directive", type: i5.InfiniteScrollDirective, selector: "[infiniteScroll], [infinite-scroll], [data-infinite-scroll]", inputs: ["infiniteScrollDistance", "infiniteScrollUpDistance", "infiniteScrollThrottle", "infiniteScrollDisabled", "infiniteScrollContainer", "scrollWindow", "immediateCheck", "horizontal", "alwaysCallback", "fromRoot"], outputs: ["scrolled", "scrolledUp"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2, decorators: [{
            type: Component,
            args: [{ selector: 'select2', template: "<div class=\"select2-label\" (click)=\"toggleOpenAndClose()\">\n    <ng-content select=\"select2-label\"></ng-content>\n    <span *ngIf=\"required\" class=\"select2-required\"></span>\n</div>\n<div\n    class=\"select2 select2-container select2-container--default select2-container--focus\"\n    [class.select2-container--below]=\"!select2above\"\n    [class.select2-container--above]=\"select2above\"\n    [class.select2-container--open]=\"isOpen\"\n    [class.select2-container--disabled]=\"disabled\"\n>\n    <div\n        class=\"selection\"\n        #selection\n        #trigger=\"cdkOverlayOrigin\"\n        [attr.tabindex]=\"!this.isOpen ? tabIndex : '-1'\"\n        (click)=\"toggleOpenAndClose()\"\n        (focus)=\"focusin()\"\n        (blur)=\"focusout()\"\n        (keydown)=\"openKey($event)\"\n        cdkOverlayOrigin\n        [class.select2-focused]=\"focused\"\n    >\n        <div\n            class=\"select2-selection\"\n            [class.select2-selection--multiple]=\"multiple\"\n            [class.select2-selection--single]=\"!multiple\"\n            role=\"combobox\"\n        >\n            <span *ngIf=\"!multiple\" class=\"select2-selection__rendered\" [title]=\"select2Option?.label || ''\">\n                <span *ngIf=\"!select2Option\">&nbsp;</span>\n                <span *ngIf=\"select2Option\" [innerHTML]=\"select2Option.label\"></span>\n                <span [class.select2-selection__placeholder__option]=\"option\" class=\"select2-selection__placeholder\">{{\n                    placeholder\n                }}</span>\n            </span>\n            <span\n                (click)=\"reset($event)\"\n                *ngIf=\"!multiple && resettable && select2Option && !(disabled || readonly)\"\n                class=\"select2-selection__reset\"\n                role=\"presentation\"\n                >\u00D7</span\n            >\n            <span *ngIf=\"!multiple\" class=\"select2-selection__arrow\" role=\"presentation\"> </span>\n            <ul *ngIf=\"multiple\" class=\"select2-selection__rendered\">\n                <span\n                    [class.select2-selection__placeholder__option]=\"select2Options?.length > 0\"\n                    class=\"select2-selection__placeholder\"\n                    >{{ placeholder }}</span\n                >\n                <li *ngFor=\"let op of option; trackBy: trackBy\" class=\"select2-selection__choice\" [title]=\"op.label\">\n                    <span\n                        *ngIf=\"!(disabled || readonly)\"\n                        (click)=\"removeSelection($event, op)\"\n                        class=\"select2-selection__choice__remove\"\n                        role=\"presentation\"\n                        >\u00D7</span\n                    >\n                    <span [innerHTML]=\"op.label\"></span>\n                </li>\n            </ul>\n        </div>\n    </div>\n    <ng-container *ngIf=\"!overlay\">\n        <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n    </ng-container>\n\n    <div class=\"select2-subscript-wrapper\">\n        <ng-content select=\"select2-hint\"></ng-content>\n    </div>\n</div>\n\n<ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayHasBackdrop\n    cdkConnectedOverlayBackdropClass=\"select2-overlay-backdrop\"\n    [cdkConnectedOverlayOrigin]=\"trigger\"\n    [cdkConnectedOverlayOpen]=\"this.isOpen && overlay\"\n    [cdkConnectedOverlayMinWidth]=\"overlayWidth\"\n    [cdkConnectedOverlayHeight]=\"overlayHeight\"\n    [cdkConnectedOverlayPositions]=\"_positions\"\n    (backdropClick)=\"toggleOpenAndClose()\"\n>\n    <ng-container *ngTemplateOutlet=\"containerTemplate\"></ng-container>\n</ng-template>\n\n<ng-template #containerTemplate>\n    <div\n        class=\"select2-container select2-container--default select2-container-dropdown\"\n        [class.select2-container--open]=\"isOpen\"\n        [class.select2-overlay]=\"overlay\"\n        [class.select2-position-auto]=\"listPosition === 'auto'\"\n    >\n        <div\n            #dropdown\n            class=\"select2-dropdown\"\n            [class.select2-dropdown--below]=\"!select2above\"\n            [class.select2-dropdown--above]=\"select2above\"\n        >\n            <div class=\"select2-search select2-search--dropdown\" [class.select2-search--hide]=\"hideSearch()\">\n                <input\n                    #searchInput\n                    [id]=\"id + '-search-field'\"\n                    [value]=\"searchText\"\n                    (keydown)=\"keyDown($event)\"\n                    (keyup)=\"searchUpdate($event)\"\n                    (change)=\"prevChange($event)\"\n                    class=\"select2-search__field\"\n                    type=\"search\"\n                    role=\"textbox\"\n                    autocomplete=\"off\"\n                    autocorrect=\"off\"\n                    autocapitalize=\"off\"\n                    spellcheck=\"false\"\n                    [attr.tabindex]=\"this.isOpen ? tabIndex : '-1'\"\n                />\n            </div>\n            <div class=\"select2-results\">\n                <ul\n                    #results\n                    class=\"select2-results__options\"\n                    [style.max-height]=\"resultMaxHeight\"\n                    role=\"tree\"\n                    tabindex=\"-1\"\n                    infiniteScroll\n                    [infiniteScrollDisabled]=\"!infiniteScroll && !isOpen\"\n                    [infiniteScrollDistance]=\"infiniteScrollDistance\"\n                    [infiniteScrollThrottle]=\"infiniteScrollThrottle\"\n                    [infiniteScrollContainer]=\"results\"\n                    (scrolled)=\"onScroll('down')\"\n                    (scrolledUp)=\"onScroll('up')\"\n                    (keydown)=\"keyDown($event)\"\n                >\n                    <ng-container *ngFor=\"let groupOrOption of filteredData; index as i; trackBy: trackBy\">\n                        <li *ngIf=\"groupOrOption.options\" class=\"select2-results__option\" role=\"group\">\n                            <strong\n                                *ngIf=\"!hasTemplate(groupOrOption, 'group'); else optGroup\"\n                                [attr.class]=\"\n                                    'select2-results__group' +\n                                    (groupOrOption.classes ? ' ' + groupOrOption.classes : '')\n                                \"\n                                [innerHTML]=\"groupOrOption.label\"\n                            ></strong>\n                            <ng-template #optGroup>\n                                <ng-container\n                                    *ngTemplateOutlet=\"getTemplate(groupOrOption, 'group'); context: groupOrOption\"\n                                >\n                                </ng-container>\n                            </ng-template>\n\n                            <ul class=\"select2-results__options select2-results__options--nested\">\n                                <li\n                                    *ngFor=\"let option of groupOrOption.options; index as j; trackBy: trackBy\"\n                                    #result\n                                    [id]=\"option.id || id + '-option-' + i + '-' + j\"\n                                    [class]=\"getOptionStyle(option)\"\n                                    role=\"treeitem\"\n                                    [attr.aria-selected]=\"isSelected(option)\"\n                                    [attr.aria-disabled]=\"isDisabled(option)\"\n                                    (mouseenter)=\"mouseenter(option)\"\n                                    (click)=\"click(option)\"\n                                >\n                                    <div\n                                        *ngIf=\"!hasTemplate(option, 'option'); else liGroup\"\n                                        class=\"select2-label-content\"\n                                        [innerHTML]=\"option.label\"\n                                    ></div>\n                                    <ng-template #liGroup>\n                                        <ng-container\n                                            *ngTemplateOutlet=\"getTemplate(option, 'option'); context: option\"\n                                        >\n                                        </ng-container>\n                                    </ng-template>\n                                </li>\n                            </ul>\n                        </li>\n                        <li\n                            *ngIf=\"!groupOrOption.options\"\n                            #result\n                            [id]=\"groupOrOption.id || id + '-option-' + i\"\n                            [class]=\"getOptionStyle(groupOrOption)\"\n                            role=\"treeitem\"\n                            [attr.aria-selected]=\"isSelected(groupOrOption)\"\n                            [attr.aria-disabled]=\"isDisabled(groupOrOption)\"\n                            (mouseenter)=\"mouseenter(groupOrOption)\"\n                            (click)=\"click(groupOrOption)\"\n                        >\n                            <div\n                                *ngIf=\"!hasTemplate(groupOrOption, 'option'); else li\"\n                                [innerHTML]=\"groupOrOption.label\"\n                                class=\"select2-label-content\"\n                            ></div>\n                            <ng-template #li>\n                                <ng-container\n                                    *ngTemplateOutlet=\"getTemplate(groupOrOption, 'option'); context: groupOrOption\"\n                                >\n                                </ng-container>\n                            </ng-template>\n                        </li>\n                    </ng-container>\n                    <li\n                        class=\"select2-no-result select2-results__option\"\n                        *ngIf=\"!filteredData?.length && noResultMessage\"\n                        [innerHTML]=\"noResultMessage\"\n                    ></li>\n                    <li\n                        class=\"select2-too-much-result select2-results__option\"\n                        *ngIf=\"maxResultsExceeded\"\n                        [innerHTML]=\"maxResultsMessage\"\n                    ></li>\n                </ul>\n            </div>\n        </div>\n    </div>\n</ng-template>\n", styles: [".select2-label{color:#000;color:var(--select2-label-text-color, #000)}.select2-container{box-sizing:border-box;display:inline-block;margin:0;position:relative;vertical-align:middle;width:100%}.select2-container .select2-container-dropdown{position:absolute;width:0px;opacity:0}.select2-container .select2-selection--single{box-sizing:border-box;cursor:pointer;display:block;height:28px;-webkit-user-select:none;user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;padding:0 0 0 8px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;flex:1 1 auto}.select2-container .select2-selection--single .select2-selection__clear{position:relative}.select2-container .select2-selection--multiple{box-sizing:border-box;cursor:pointer;display:block;min-height:32px;-webkit-user-select:none;user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline-block;overflow:hidden;padding-left:8px;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-search--inline{float:left}.select2-container .select2-search--inline .select2-search__field{box-sizing:border-box;border:none;font-size:100%;margin-top:5px;padding:0}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{background:white;background:var(--select2-dropdown-background, white);border:1px solid #aaa;border:1px solid var(--select2-dropdown-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);box-sizing:border-box;display:block;position:absolute;width:100%;z-index:1051;height:0;overflow:hidden}.select2-dropdown .select2-label-content{display:contents}.select2-results{display:block}.select2-results__options{list-style:none;margin:0;padding:0}.select2-results__option{padding:6px;-webkit-user-select:none;user-select:none;color:#000;color:var(--select2-option-text-color, #000)}.select2-results__option[aria-selected]{cursor:pointer}.select2-container.select2-container-dropdown.select2-container--open{width:100%;opacity:1}.select2-container--open .select2-dropdown{overflow:auto;height:auto}.select2-container--open .select2-dropdown--above{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0;bottom:27px;display:flex;flex-direction:column-reverse}.select2-container--open .select2-dropdown--below{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{padding:4px;width:100%;box-sizing:border-box}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{border:0;margin:0;padding:0;display:block;position:fixed;left:0;top:0;min-height:100%;min-width:100%;height:auto;width:auto;opacity:0;z-index:99;background:#fff;filter:alpha(opacity=0)}.select2-required:before{content:\"*\";color:red;color:var(--select2-required-color, red)}.select2-hidden-accessible{border:0!important;clip:rect(0 0 0 0)!important;height:1px!important;margin:-1px!important;overflow:hidden!important;padding:0!important;position:absolute!important;width:1px!important}.select2-container--default .select2-selection--single{background:#fff;background:var(--select2-selection-background, #fff);border:1px solid #aaa;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);display:flex}.select2-container--default .select2-selection--single .select2-selection__rendered{color:#444;color:var(--select2-selection-text-color, #444);line-height:28px}.select2-container--default .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:700}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:#999;color:var(--select2-placeholder-color, #999)}.select2-container--default .select2-selection--single .select2-selection__placeholder span{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;text-overflow:var(--select2-placeholder-overflow, ellipsis)}.select2-container--default .select2-selection--single .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--single .select2-selection__reset,.select2-container--default .select2-selection--single .select2-selection__arrow{display:flex;width:20px;align-items:center;justify-content:center}.select2-container--default .select2-selection--single .select2-selection__arrow:before{content:\" \";border-color:#888 transparent;border-color:var(--select2-arrow-color, #888) transparent;border-style:solid;border-width:5px 4px 0;height:0;width:0}.select2-container--default .select2-selection--single .select2-selection__reset{color:#999;color:var(--select2-reset-color, #999)}.select2-container--default.select2-container--disabled .select2-selection--single{background:#eee;background:var(--select2-selection-disabled-background, #eee);cursor:default}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear{display:none}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow:before{border-color:transparent transparent #888;border-color:transparent transparent var(--select2-arrow-color, #888);border-width:0 4px 5px}.select2-container--default .select2-selection--multiple{background:#fff;background:var(--select2-selection-background, #fff);border:1px solid #aaa;border:1px solid var(--select2-selection-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);cursor:text}.select2-container--default .select2-selection--multiple .select2-selection__rendered{flex:1 1 auto;box-sizing:border-box;list-style:none;margin:0;padding:0 5px;width:100%}.select2-container--default .select2-selection--multiple .select2-selection__rendered li{list-style:none}.select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;width:100%;color:#999;color:var(--select2-placeholder-color, #999);margin-top:5px;float:left;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;text-overflow:var(--select2-placeholder-overflow, ellipsis)}.select2-container--default .select2-selection--multiple .select2-selection__placeholder__option{display:none}.select2-container--default .select2-selection--multiple .select2-selection__clear{cursor:pointer;float:right;font-weight:700;margin-top:5px;margin-right:10px}.select2-container--default .select2-selection--multiple .select2-selection__choice{color:#000;color:var(--select2-selection-choice-text-color, #000);background:#e4e4e4;background:var(--select2-selection-choice-background, #e4e4e4);border:1px solid #aaa;border:1px solid var(--select2-selection-choice-border-color, #aaa);border-radius:4px;border-radius:var(--select2-selection-border-radius, 4px);cursor:default;float:left;margin-right:5px;margin-top:5px;padding:0 5px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{color:#999;color:var(--select2-selection-choice-close-color, #999);cursor:pointer;display:inline-block;font-weight:700;margin-right:2px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover{color:#333;color:var(--select2-selection-choice-hover-close-color, #333)}.select2-container--default.select2-container--focused .select2-selection--multiple{border:solid #000 1px;border:solid var(--select2-selection-focus-border-color, #000) 1px;outline:none}.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,.select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{border:solid #000 1px;border:solid var(--select2-selection-focus-border-color, #000) 1px;outline:none}.select2-container--default.select2-container--disabled .select2-selection--multiple{background:#eee;background:var(--select2-selection-disabled-background, #eee);cursor:default}.select2-container--default.select2-container--disabled .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--open.select2-container--above .select2-selection--single,.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple{border-top-left-radius:0;border-top-right-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--single,.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid #aaa;border:1px solid var(--select2-search-border-color, #aaa);background:#fff;background:1px solid var(--select2-search-background, #fff);border-radius:0;border-radius:var(--select2-search-border-radius, 0px)}.select2-container--default .select2-search--inline .select2-search__field{background:transparent;border:none;outline:none;box-shadow:none;-webkit-appearance:textfield}.select2-container--default .select2-results>.select2-results__options{overflow-y:auto}.select2-container--default .select2-results__option[role=group]{padding:0}.select2-container--default .select2-results__option[aria-disabled=true]{color:#999;color:var(--select2-option-disabled-text-color, #999);background:transparent;background:var(--select2-option-disabled-background, transparent)}.select2-container--default .select2-results__option[aria-selected=true]{color:#000;color:var(--select2-option-selected-text-color, #000);background:#ddd;background:var(--select2-option-selected-background, #ddd)}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--highlighted[aria-selected]{background:#5897fb;background:var(--select2-option-highlighted-background, #5897fb);color:#fff;color:var(--select2-option-highlighted-text-color, #fff)}.select2-container--default .select2-results__option--hide{display:none}.select2-container--default .select2-results__group{cursor:default;display:block;padding:6px;color:gray;color:var(--select2-option-group-text-color, gray);background:transparent;background:var(--select2-option-group-background, transparent)}.select2-no-result{color:#888;color:var(--select2-no-result-color, #888);font-style:italic;font-style:var(--select2-no-result-font-style, italic)}.select2-too-much-result{color:#888;color:var(--select2-too-much-result-color, #888);font-style:italic;font-style:var(--select2-too-much-font-style, italic)}:host.nostyle .select2-dropdown{border-color:transparent}:host.nostyle .select2-selection--single,:host.nostyle .select2-selection--multiple{background:transparent;border-color:transparent}:host.nostyle .select2-container--default .select2-focused .select2-selection--single,:host.nostyle .select2-container--default .select2-focused .select2-selection--multiple,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--single,:host.nostyle .select2-container--default:not(.select2-container--open) .select2-focused .select2-selection--multiple{background:transparent;border-color:transparent}:host.material{display:inline-block;width:300px}:host.material>.select2-container{padding-bottom:1.29688em;vertical-align:inherit}:host.material>.select2-container .selection{padding:.4375em 0;border-top:.84375em solid transparent;display:inline-flex;align-items:baseline;width:100%;height:auto}:host.material .select2-container--default .select2-selection--single,:host.material .select2-container--default .select2-selection--multiple{width:100%;border:0;border-radius:0;height:24px;box-sizing:border-box}:host.material .select2-container--default .select2-selection--single:before,:host.material .select2-container--default .select2-selection--multiple:before{content:\" \";display:block;position:absolute;bottom:1.65em;background:#ddd;background:var(--select2-material-underline, #ddd);height:1px;width:100%}:host.material .select2-container--default .select2-selection--single:after,:host.material .select2-container--default .select2-selection--multiple:after{content:\" \";display:block;position:absolute;bottom:1.63em;background:#5a419e;background:var(--select2-material-underline-active, #5a419e);height:2px;width:0%;left:50%;transition:none}:host.material .select2-container--default .select2-selection--single .select2-selection__rendered,:host.material .select2-container--default .select2-selection--multiple .select2-selection__rendered{padding-left:1px;line-height:inherit}:host.material .select2-container--default .select2-selection--single .select2-selection__placeholder,:host.material .select2-container--default .select2-selection--multiple .select2-selection__placeholder{display:block;color:#00000061;color:var(--select2-material-placeholder-color, rgba(0, 0, 0, .38));transition:transform .3s;position:absolute;transform-origin:0 21px;left:0;top:20px}:host.material .select2-container--default .select2-container--open{left:0;bottom:1.6em}:host.material .select2-container--default .select2-selection__placeholder__option{transform:translateY(-1.5em) scale(.75) perspective(100px) translateZ(.001px);width:133.33333%}:host.material .select2-container--default .select2-selection__arrow{top:20px}:host.material .select2-container--default.select2-container--open .select2-selection--single:after,:host.material .select2-container--default.select2-container--open .select2-selection--multiple:after,:host.material .select2-container--default .select2-focused .select2-selection--single:after,:host.material .select2-container--default .select2-focused .select2-selection--multiple:after{transition:width .3s cubic-bezier(.12,1,.77,1),left .3s cubic-bezier(.12,1,.77,1);width:100%;left:0%}:host.material .select2-container--default .select2-dropdown{border-radius:0;border:0;box-shadow:0 5px 5px #00000080}:host.material .select2-container--default .select2-results__option[aria-selected=true],:host.material .select2-container--default .select2-results__option--highlighted[aria-selected]{background:rgba(0,0,0,.04);background:var(--select2-material-option-selected-background, rgba(0, 0, 0, .04));color:#000;color:var(--select2-material-option-highlighted-text-color, #000)}:host.material .select2-container--default .select2-results__option[aria-selected=true]{color:#ff5722;color:var(--select2-material-option-selected-text-color, #ff5722)}:host.material .select2-container--default.select2-container--disabled .select2-selection--single,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple{background:transparent}:host.material .select2-container--default.select2-container--disabled .select2-selection--single:before,:host.material .select2-container--default.select2-container--disabled .select2-selection--multiple:before{background:linear-gradient(to right,rgba(0,0,0,.26) 0,rgba(0,0,0,.26) 33%,transparent 0);background:var(--select2-material-underline-disabled, linear-gradient(to right, rgba(0, 0, 0, .26) 0, rgba(0, 0, 0, .26) 33%, transparent 0));background-size:4px 1px;background-repeat:repeat-x;background-position:0 bottom}:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--single:after,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:before,:host.material.ng-invalid.ng-touched .select2-container--default .select2-selection--multiple:after{background:red;background:var(--select2-material-underline-invalid, red)}:host.material:not(.select2-container--open) .select2-focused .select2-selection--single,:host.material:not(.select2-container--open) .select2-focused .select2-selection--multiple{border:0}:host.material .select2-subscript-wrapper{position:absolute;top:calc(100% - 1.72917em);font-size:75%;color:#888;color:var(--select2-hint-text-color, #888)}::ng-deep .select2-overlay-backdrop{background:rgba(0,0,0,.32);background:var(--select2-overlay-backdrop, transparent)}::ng-deep .cdk-overlay-container .select2-container .select2-dropdown.select2-dropdown--above{bottom:28px}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown{margin-bottom:28px}::ng-deep .cdk-overlay-container .select2-container--open.select2-position-auto .select2-dropdown.select2-dropdown--above{bottom:0;margin-bottom:0;margin-top:28px}@supports (-moz-appearance: none){select2.material .select2-container--default .select2-selection--single,select2.material .select2-container--default .select2-selection--multiple{height:26px}}@supports (-ms-scroll-limit: 0){select2.material .select2-container--default .select2-selection--single,select2.material .select2-container--default .select2-selection--multiple{height:25px}}\n"] }]
        }], ctorParameters: function () {
        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i2.NgForm, decorators: [{
                        type: Optional
                    }] }, { type: i2.FormGroupDirective, decorators: [{
                        type: Optional
                    }] }, { type: i2.NgControl, decorators: [{
                        type: Self
                    }, {
                        type: Optional
                    }] }, { type: undefined, decorators: [{
                        type: Attribute,
                        args: ['tabindex']
                    }] }];
    }, propDecorators: { data: [{
                type: Input
            }], minCharForSearch: [{
                type: Input
            }], displaySearchStatus: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], customSearchEnabled: [{
                type: Input
            }], limitSelection: [{
                type: Input
            }], listPosition: [{
                type: Input
            }], multiple: [{
                type: Input
            }], overlay: [{
                type: Input
            }], styleMode: [{
                type: Input
            }], noResultMessage: [{
                type: Input
            }], maxResults: [{
                type: Input
            }], maxResultsMessage: [{
                type: Input
            }], infiniteScrollDistance: [{
                type: Input
            }], infiniteScrollThrottle: [{
                type: Input
            }], infiniteScroll: [{
                type: Input
            }], editPattern: [{
                type: Input
            }], templates: [{
                type: Input
            }], resultMaxHeight: [{
                type: Input
            }], update: [{
                type: Output
            }], open: [{
                type: Output
            }], close: [{
                type: Output
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], search: [{
                type: Output
            }], scroll: [{
                type: Output
            }], removeOption: [{
                type: Output
            }], minCountForSearch: [{
                type: Input
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['id']
            }], required: [{
                type: Input
            }], disabled: [{
                type: Input
            }], hideSelectedItems: [{
                type: Input
            }], readonly: [{
                type: Input
            }], value: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], resettable: [{
                type: Input
            }], ariaInvalid: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], classMaterial: [{
                type: HostBinding,
                args: ['class.material']
            }], classNostyle: [{
                type: HostBinding,
                args: ['class.nostyle']
            }], select2above: [{
                type: HostBinding,
                args: ['class.select2-above']
            }], cdkConnectedOverlay: [{
                type: ViewChild,
                args: [CdkConnectedOverlay]
            }], selection: [{
                type: ViewChild,
                args: ['selection', { static: true }]
            }], resultContainer: [{
                type: ViewChild,
                args: ['results']
            }], results: [{
                type: ViewChildren,
                args: ['result']
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput']
            }], dropdown: [{
                type: ViewChild,
                args: ['dropdown']
            }] } });

class Select2Hint {
}
/** @nocollapse */ Select2Hint.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2Hint, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ Select2Hint.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.0", type: Select2Hint, selector: "select2-hint", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2Hint, decorators: [{
            type: Directive,
            args: [{ selector: 'select2-hint' }]
        }] });

class Select2Label {
}
/** @nocollapse */ Select2Label.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2Label, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ Select2Label.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.0", type: Select2Label, selector: "select2-label", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2Label, decorators: [{
            type: Directive,
            args: [{ selector: 'select2-label' }]
        }] });

class Select2Module {
}
/** @nocollapse */ Select2Module.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2Module, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ Select2Module.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "14.1.0", ngImport: i0, type: Select2Module, declarations: [Select2Hint, Select2Label, Select2], imports: [CommonModule, FormsModule, OverlayModule, ReactiveFormsModule, InfiniteScrollModule], exports: [FormsModule, ReactiveFormsModule, Select2Hint, Select2Label, Select2] });
/** @nocollapse */ Select2Module.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2Module, imports: [CommonModule, FormsModule, OverlayModule, ReactiveFormsModule, InfiniteScrollModule, FormsModule, ReactiveFormsModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.0", ngImport: i0, type: Select2Module, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, OverlayModule, ReactiveFormsModule, InfiniteScrollModule],
                    declarations: [Select2Hint, Select2Label, Select2],
                    exports: [FormsModule, ReactiveFormsModule, Select2Hint, Select2Label, Select2],
                }]
        }] });

/*
 * Public API Surface of ng-select2-component
 */

/**
 * Generated bundle index. Do not edit.
 */

export { Select2, Select2Hint, Select2Label, Select2Module, Select2Utils, defaultMinCountForSearch, protectRegexp, timeout, unicodePatterns };
//# sourceMappingURL=ng-select2-component.mjs.map
