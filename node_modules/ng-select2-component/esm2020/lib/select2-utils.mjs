import { defaultMinCountForSearch, protectRegexp, unicodePatterns } from './select2-const';
export class Select2Utils {
    static getOptionByValue(data, value) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    for (const option of options) {
                        if (option.value === value) {
                            return option;
                        }
                    }
                }
                else if (groupOrOption.value === value) {
                    return groupOrOption;
                }
            }
        }
        return null;
    }
    static getOptionsByValue(data, value, multiple) {
        if (multiple) {
            const values = Array.isArray(value) ? value : [];
            const result = [];
            for (const v of values) {
                const option = Select2Utils.getOptionByValue(data, v);
                if (option) {
                    result.push(option);
                }
            }
            return result;
        }
        return Select2Utils.getOptionByValue(data, value);
    }
    static getFirstAvailableOption(data) {
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    for (const option of options) {
                        if (!option.disabled) {
                            return option.value;
                        }
                    }
                }
                else {
                    const option = groupOrOption;
                    if (!option.disabled) {
                        return option.value;
                    }
                }
            }
        }
        return null;
    }
    static valueIsNotInFilteredData(filteredData, value) {
        if (Select2Utils.isNullOrUndefined(value)) {
            return true;
        }
        for (const groupOrOption of filteredData) {
            const options = groupOrOption.options;
            if (options) {
                for (const option of options) {
                    if (option.value === value) {
                        return false;
                    }
                }
            }
            else if (groupOrOption.value === value) {
                return false;
            }
        }
        return true;
    }
    // eslint-disable-next-line
    static getPreviousOption(filteredData, hoveringValue) {
        let findIt = Select2Utils.isNullOrUndefined(hoveringValue);
        for (let i = filteredData.length - 1; i >= 0; i--) {
            const groupOrOption = filteredData[i];
            const options = groupOrOption.options;
            if (options) {
                for (let j = options.length - 1; j >= 0; j--) {
                    const option = options[j];
                    if (findIt && !option.disabled && !option.hide) {
                        return option;
                    }
                    if (!findIt) {
                        findIt = option.value === hoveringValue;
                    }
                }
            }
            else {
                const option = groupOrOption;
                if (findIt && !option.disabled && !option.hide) {
                    return option;
                }
                if (!findIt) {
                    findIt = option.value === hoveringValue;
                }
            }
        }
        return null;
    }
    // eslint-disable-next-line
    static getNextOption(filteredData, hoveringValue) {
        let findIt = Select2Utils.isNullOrUndefined(hoveringValue);
        for (const groupOrOption of filteredData) {
            const options = groupOrOption.options;
            if (options) {
                for (const option of options) {
                    if (findIt) {
                        if (!option.disabled && !option.hide) {
                            return option;
                        }
                    }
                    else if (!findIt) {
                        findIt = option.value === hoveringValue;
                    }
                }
            }
            else {
                const option = groupOrOption;
                if (findIt) {
                    if (!option.disabled && !option.hide) {
                        return option;
                    }
                }
                else if (!findIt) {
                    findIt = option.value === hoveringValue;
                }
            }
        }
        return null;
    }
    static getReduceData(data, maxResults = 0) {
        if (maxResults > 0) {
            let counter = 0;
            const result = [];
            // debugger;
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    const group = {
                        ...groupOrOption,
                        options: [],
                    };
                    result.push(group);
                    for (const item of options) {
                        group.options.push(item);
                        counter++;
                        if (counter === maxResults) {
                            return { result, reduce: true };
                        }
                    }
                }
                else {
                    result.push(groupOrOption);
                    counter++;
                }
                if (counter === maxResults) {
                    return { result, reduce: true };
                }
            }
            return { result, reduce: false };
        }
        else {
            return { result: data, reduce: false };
        }
    }
    static getFilteredData(data, searchText, editPattern) {
        if (searchText) {
            const result = [];
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    if (options.some(group => Select2Utils.containSearchText(group.label, searchText, editPattern))) {
                        const filteredOptions = options.filter(group => Select2Utils.containSearchText(group.label, searchText, editPattern));
                        result.push({
                            ...groupOrOption,
                            options: filteredOptions,
                        });
                    }
                }
                else if (Select2Utils.containSearchText(groupOrOption.label, searchText, editPattern)) {
                    result.push(groupOrOption);
                }
            }
            return result;
        }
        else {
            return data;
        }
    }
    static getFilteredSelectedData(data, selectedOptions) {
        const result = [];
        for (const groupOrOption of data) {
            const options = groupOrOption.options;
            if (options) {
                const filteredOptions = options.filter(group => Select2Utils.isSelected(selectedOptions, group, true) === 'false');
                if (filteredOptions.length) {
                    result.push({
                        ...groupOrOption,
                        options: filteredOptions,
                    });
                }
            }
            else if (Select2Utils.isSelected(selectedOptions, groupOrOption, true) === 'false') {
                result.push(groupOrOption);
            }
        }
        return result;
    }
    static isSearchboxHiddex(data, minCountForSearch) {
        if (minCountForSearch === '' ||
            minCountForSearch === undefined ||
            minCountForSearch === null ||
            isNaN(+minCountForSearch)) {
            minCountForSearch = defaultMinCountForSearch;
        }
        const optionCount = Select2Utils.getOptionsCount(data);
        return optionCount < +minCountForSearch;
    }
    static isSelected(options, option, multiple) {
        return multiple
            ? options && options.some(op => op.value === option.value)
                ? 'true'
                : 'false'
            : options && option.value === options.value
                ? 'true'
                : 'false';
    }
    static removeSelection(options, option) {
        for (let i = 0; i < options.length; i++) {
            if (options[i].value === option.value) {
                options.splice(i, 1);
                return;
            }
        }
    }
    static getOptionsCount(data) {
        let count = 0;
        if (Array.isArray(data)) {
            for (const groupOrOption of data) {
                const options = groupOrOption.options;
                if (options) {
                    count += options.length;
                }
                else {
                    count++;
                }
            }
        }
        return count;
    }
    static isNullOrUndefined(value) {
        return value === null || value === undefined;
    }
    static containSearchText(label, searchText, editPattern) {
        return searchText
            ? Select2Utils.formatSansUnicode(label).match(new RegExp(Select2Utils.formatPattern(searchText, editPattern), 'i')) !== null
            : true;
    }
    static protectPattern(str) {
        return str.replace(protectRegexp, '\\$&');
    }
    static formatSansUnicode(str) {
        for (const unicodePattern of unicodePatterns) {
            str = str.replace(unicodePattern.s, unicodePattern.l);
        }
        return str;
    }
    static formatPattern(str, editPattern) {
        str = Select2Utils.formatSansUnicode(Select2Utils.protectPattern(str));
        if (editPattern && typeof editPattern === 'function') {
            str = editPattern(str);
        }
        return str;
    }
}
//# sourceMappingURL=data:application/json;base64,